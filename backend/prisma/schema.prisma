// This is your updated Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  phoneNumber       String         @unique
  role              Role           @default(LEARNER)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resetCode         String?
  resetCodeExpiry   DateTime?
  instructorStatus  RequestStatus  @default(NOT_REQUESTED)
  isActive          Boolean        @default(true)
  bio               String?
  earnings          Float          @default(0)
  coursesCreated    Course[]       @relation("InstructorCourses")
  cohortsManaged    Cohort[]       @relation("InstructorCohorts")
  enrollments       Enrollment[]
  reviews           Review[]
  comments          Comment[]
  chatMessages      ChatMessage[]
}

model Course {
  id              String    @id @default(uuid())
  title           String
  description     String
  instructorId    String
  instructor      User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  price           Float     @default(0)
  isPaid          Boolean   @default(false)
  isPublished     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  categories      Category[]
  materials       CourseMaterial[]
  enrollments     Enrollment[]
  cohorts         Cohort[]
  reviews         Review[]
}

model Category {
  id              String    @id @default(uuid())
  name            String    @unique
  courses         Course[]
}

model CourseMaterial {
  id              String    @id @default(uuid())
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  title           String
  type            MaterialType
  content         String
  downloadable    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments        Comment[]
}

model Enrollment {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  enrolledAt      DateTime  @default(now())
  progress        Float     @default(0)
  completed       Boolean   @default(false)
  cohortId        String?
  cohort          Cohort?   @relation(fields: [cohortId], references: [id])
}

model Cohort {
  id              String    @id @default(uuid())
  name            String
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  instructorId    String
  instructor      User      @relation("InstructorCohorts", fields: [instructorId], references: [id])
  startDate       DateTime
  endDate         DateTime?
  enrollments     Enrollment[]
  chatRooms       ChatRoom[]
}

model ChatRoom {
  id              String    @id @default(uuid())
  cohortId        String
  cohort          Cohort    @relation(fields: [cohortId], references: [id])
  messages        ChatMessage[]
}

model ChatMessage {
  id              String    @id @default(uuid())
  chatRoomId      String
  chatRoom        ChatRoom  @relation(fields: [chatRoomId], references: [id])
  senderId        String
  sender          User      @relation(fields: [senderId], references: [id])
  content         String
  sentAt          DateTime  @default(now())
}

model Review {
  id              String    @id @default(uuid())
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  rating          Int
  comment         String?
  createdAt       DateTime  @default(now())
}

model Comment {
  id              String    @id @default(uuid())
  materialId      String
  material        CourseMaterial @relation(fields: [materialId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String
  createdAt       DateTime  @default(now())
}

model Payment {
  id              String    @id @default(uuid())
  amount          Float
  status          PaymentStatus
  userId          String
  courseId        String
  createdAt       DateTime  @default(now())
}

model Payout {
  id              String    @id @default(uuid())
  amount          Float
  status          PayoutStatus
  userId          String
  createdAt       DateTime  @default(now())
}

enum Role {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_REQUESTED
}

enum MaterialType {
  VIDEO
  DOCUMENT
  QUIZ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}