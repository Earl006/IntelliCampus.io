generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  phoneNumber       String         @unique
  role              Role           @default(LEARNER)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resetCode         String?
  resetCodeExpiry   DateTime?
  instructorStatus  RequestStatus  @default(NOT_REQUESTED)
  isActive          Boolean        @default(true)
  bio               String?
  earnings          Float          @default(0)

  // Relations
  coursesCreated    Course[]       @relation("InstructorCourses")
  cohortsManaged    Cohort[]       @relation("InstructorCohorts")
  enrollments       Enrollment[]
  reviews           Review[]
  comments          Comment[]
  chatMessages      ChatMessage[]


  Payout Payout[]
}

model Course {
  id              String          @id @default(uuid())
  title           String
  description     String
  instructorId    String
  instructor      User            @relation("InstructorCourses", fields: [instructorId], references: [id])
  price           Float           @default(0)
  isPaid          Boolean         @default(false)
  isPublished     Boolean         @default(false)
  bannerImageUrl  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  categories      Category[]
  subCategories   SubCategory[]   @relation("SubCategoriesOnCourses")
  materials       CourseMaterial[]
  enrollments     Enrollment[]
  cohorts         Cohort[]
  reviews         Review[]
  chatRooms       CourseChatRoom[]
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  courses    Course[]
  // optional: subcategories if you choose a nested arrangement
  subCategories SubCategory[]
}

model SubCategory {
  id         String     @id @default(uuid())
  name       String     @unique
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])

  courses    Course[]   @relation("SubCategoriesOnCourses")
}

model CourseMaterial {
  id            String       @id @default(uuid())
  courseId      String
  course        Course       @relation(fields: [courseId], references: [id])
  title         String
  type          MaterialType
  content       String
  downloadable  Boolean      @default(false)
  week          Int?
  day           Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  comments      Comment[]
}

model Enrollment {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id])
  enrolledAt  DateTime   @default(now())
  progress    Float      @default(0)
  completed   Boolean    @default(false)
  cohortId    String?
  cohort      Cohort?    @relation(fields: [cohortId], references: [id])
}

model Cohort {
  id            String          @id @default(uuid())
  name          String
  courseId      String
  course        Course          @relation(fields: [courseId], references: [id])
  instructorId  String
  instructor    User            @relation("InstructorCohorts", fields: [instructorId], references: [id])
  startDate     DateTime
  endDate       DateTime?
  isCompleted   Boolean         @default(false)

  enrollments   Enrollment[]
  chatRooms     CohortChatRoom[]
}

model CourseChatRoom {
  id         String         @id @default(uuid())
  courseId   String
  course     Course         @relation(fields: [courseId], references: [id])
  messages   ChatMessage[]
}

model CohortChatRoom {
  id         String         @id @default(uuid())
  cohortId   String
  cohort     Cohort         @relation(fields: [cohortId], references: [id])
  messages   ChatMessage[]
}

model ChatMessage {
  id               String           @id @default(uuid())
  courseChatRoomId String?
  courseChatRoom   CourseChatRoom?  @relation(fields: [courseChatRoomId], references: [id])
  cohortChatRoomId String?
  cohortChatRoom   CohortChatRoom?  @relation(fields: [cohortChatRoomId], references: [id])
  senderId         String
  sender           User             @relation(fields: [senderId], references: [id])
  content          String
  sentAt           DateTime         @default(now())
}

model Review {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Comment {
  id         String         @id @default(uuid())
  materialId String
  material   CourseMaterial @relation(fields: [materialId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  content    String
  createdAt  DateTime       @default(now())
}

model Payment {
  id         String        @id @default(uuid())
  amount     Float
  status     PaymentStatus
  userId     String
  courseId   String
  createdAt  DateTime      @default(now())
}

model Payout {
  id           String       @id @default(uuid())
  amount       Float
  status       PayoutStatus
  instructorId String      
  instructor   User        @relation(fields: [instructorId], references: [id])
  method       PayoutMethod
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum PayoutMethod {
  MPESA
  PAYPAL
}

enum Role {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_REQUESTED
}

enum MaterialType {
  VIDEO
  DOCUMENT
  QUIZ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}

// Many-to-many pivot
// This table is automatically managed by Prisma when using the @relation("SubCategoriesOnCourses") attribute.
model SubCategoryToCourse {
  A String
  B String

  @@id([A, B])
  @@index([B])
}